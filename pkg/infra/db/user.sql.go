// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_uid, created_at, updated_at
) VALUES (
  $1, extract(epoch from now())::bigint, extract(epoch from now())::bigint
)
RETURNING id, created_at, updated_at, user_uid
`

func (q *Queries) CreateUser(ctx context.Context, userUid string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, userUid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserUid,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userid int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userid)
	return err
}

const getUserByUserUID = `-- name: GetUserByUserUID :one
SELECT id, created_at, updated_at, user_uid FROM users
WHERE user_uid = $1
LIMIT 1
`

func (q *Queries) GetUserByUserUID(ctx context.Context, userUid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserUID, userUid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserUid,
	)
	return i, err
}
